@startuml
title MIPS Processor Architecture with Assembly Instructions

' Define the main blocks
state "Program Counter" as PC {
    state "Current PC" as PC_Current
    state "Next PC" as PC_Next
}

state "Instruction Fetch" as IF {
    state "Instruction Memory" as IM
}

state "Decode/Control" as DC {
    state "Register File" as RF
    state "Control Unit" as CU
}

state "Execution" as EX {
    state "ALU Control" as ALUC
    state "ALU" as ALU
}

state "Memory Access" as MEM {
    state "Data Memory" as DM
}

state "Write Back" as WB {
    state "Update Registers" as UR
}

' Connect states with arrows to show data flow
PC --> IM : "Fetch Instruction\n(PC Address)"
IM --> RF : "Send Instruction\n(OPCode, Addresses)"
IM --> CU : "Control Signals\n(OPCode)"
RF --> ALU : "Data for Operations\n(Read Register Data)"
CU -down-> ALUC : "Determine Operation\n(ALUOp)"
ALUC --> ALU : "Execute ALU Operation\n(ALU Control)"
ALU --> DM : "Address / Data to\nData Memory"
ALU -up-> PC : "Zero Flag for\nBranch Operations"
DM --> UR : "Data to Register File"
UR -up-> RF : "Write Back Data"

' Add notes to clarify the role of each block
note right of CU
  Control Signals Include:
  - RegDst, Jump, Branch
  - MemRead, MemtoReg, ALUSrc
  - RegWrite, MemWrite, Bne
end note

note right of ALU
  Supports operations:
  - ADD, ADDI, SUB, SUBU
  - AND, ANDI, OR, ORI
  - NOR, SLT, BEQ, BNE
  - LW, SW, J
end note

note right of PC
  Sequentially updates
  to fetch the next
  instruction address.
end note

@enduml
